import{_ as t}from"./chunks/SynthPage.9v0ut3xA.js";import{B as o,h as s,D as i,Q as n,R as r,u as l,G as d,f as c}from"./chunks/framework.Ch2f3zJW.js";import"./chunks/useClicks.CUHhquVm.js";import"./chunks/theme.DRLaY2Bl.js";import"./chunks/index.CVGuM2cA.js";const p=d('<p>Cardinal is a free and open-source virtual modular synthesizer plugin, available in AudioUnit/CLAP/LV2/VST2/VST3 plugin formats and as a standalone app for FreeBSD, Linux, macOS, Windows and the Web. It is based on the popular VCV Rack but with a focus on being a fully self-contained plugin version.</p><p>More specifically, this is a DPF-based plugin wrapper around VCV Rack, using its code directly instead of forking the project, with the target of having a self-contained, fully free and open-source plugin version of Rack. See the why section below for the reasons Cardinal exists, also for frequently asked questions check this FAQ document.</p><p>Cardinal contains Rack, some 3rd-party modules and a few internal utilities all in a single binary. All &quot;Core&quot; modules from Rack have been replaced by Cardinal equivalents, simplified to better work for an audio plugin.</p><p>Cardinal does not load external modules and does not connect to the official Rack library/store. All VCV branding has been removed (to the best of our knowledge) in order to avoid any trademark issues.</p><h2 id="why" tabindex="-1">Why <a class="header-anchor" href="#why" aria-label="Permalink to &quot;Why&quot;">â€‹</a></h2><p>Cardinal was created first and foremost as a way to have Rack as a proper open-source audio plugin. A proper audio plugin should be self-contained as much as possible, as to not interfere with the DAW/Host. Loading external modules clearly goes against this idea. Not to mention being open-source, otherwise we are at the mercy of the wishes of a company for what we can and cannot do, which is not something Cardinal&#39;s authors wish to abide by.</p><p>A self-contained plugin can&#39;t be overstated, as DLL/shared-object symbol conflicts can trigger hard-to-debug crashes. While Rack tries to mitigate this as much as possible, crashes due to conflicting modules have already been seen in v2 builds. On the other side, Cardinal redefines class and function names as needed to avoid as many conflicts as possible.</p><p>Support for ARM and non-mainstream platforms (for example BSD) has also always been missing from the official Rack since the start. While we can patch the Rack free version to support these, same can&#39;t be done with Rack Pro with it being a closed-source product. The online library/store only supports a very specific set of platforms too, so non-supported platforms would need any 3rd-party modules to be manually compiled to make them usable.</p><p>Unhappiness with the audio threading behaviour of Rack also plays a role. Both audio and MIDI should be locked to the host audio thread as to minimize (or even altogether remove) latency and jitter. The use of separate threads for MIDI is bad design, one that has been corrected in DAWs and JACK-MIDI for several years... But Rack&#39;s use of RtMidi requires separate threading, so Cardinal does not use it.</p>',9),w=JSON.parse('{"title":"","description":"","frontmatter":{"dynamic":true,"page_type":"synth"},"headers":[],"params":{"url":"https://cardinal.kx.studio/live","date_created":"2024-05-20T18:57:14.836Z","title":" DISTRHO Cardinal","slug":"cardinal","author":"Filipe Coelho, aka falkTX","author_link":"https://falktx.berlin/","description":"Cardinal is a free and open-source virtual modular synthesizer plugin, available in AudioUnit/CLAP/LV2/VST2/VST3 plugin formats and as a standalone app for FreeBSD, Linux, macOS, Windows and the Web.","tags":["Modular","FM","Poly"],"archive_link":null,"archive":false,"iframe":true,"cover":"dc7070e1-66fd-4f74-95d2-92d8388864e2","id":56,"sort":17,"clicks":5,"public":false,"is_new":true,"stats":[48]},"relativePath":"cardinal/index.md","filePath":"cardinal/index.md","lastUpdated":0}'),u={name:"cardinal/index.md"},C=Object.assign(u,{setup(h){const{params:e,frontmatter:f}=o();return(m,b)=>{const a=t;return c(),s("div",null,[i(a,n(r(l(e))),null,16),p])}}});export{w as __pageData,C as default};
