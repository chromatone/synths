import{_ as a}from"./chunks/SynthPage.CH5KmkC0.js";import{B as i,h as n,D as s,Q as o,R as r,u as l,f as d}from"./chunks/framework.Ch2f3zJW.js";import"./chunks/useClicks.RkCdhX3B.js";import"./chunks/theme.DaoXcD6v.js";import"./chunks/index.CVGuM2cA.js";const y=JSON.parse(`{"title":"","description":"","frontmatter":{"dynamic":true,"page_type":"synth"},"headers":[],"params":{"url":"https://billard.medusis.com/","date_created":"2024-06-26T16:11:33.298Z","title":"Billiard","slug":"biliard","author":"Carl-Leonard Von Fligenstein","author_link":"https://news.ycombinator.com/user?id=bambax","description":" Here's Billard. It combines music and physics into a unique creative tool, as I explore various unconventional methods for generating music.\\n\\nMost traditional music composition tools revolve around the idea of a repeatable pattern. Billard is a webapp that never repeats itself. It generates music automatically based on the collisions of balls in a 2D space. Collisions trigger notes (or chords) in a given key. One can add balls or move them (y-position is pitch); the app remembers its state between reloads; or it can be reset with the 'init' button on the top left. Gravity can be adjusted in real time to change the behavior of the balls.\\n\\nIt owes a lot of inspiration to Brian Eno and Erik Satie (inventor of musique d'ameublement, or \\"furniture music\\"). Some may think the lack of pattern makes it not musical enough -- but this lets it be listened to —and watched— for a while without boredom.\\n\\nThe webapp is made using plain JavaScript. (All SVG icons were made 'by hand'.) It uses Tone.js only for triggering piano samples. Beyond piano, it's MIDI-enabled and works well at slow speed with haunting, dark synth sounds.","tags":["MIDI","Poly","Physics","Sequencer"],"archive_link":null,"archive":false,"iframe":true,"cover":"b56f4acb-b528-4d18-a3b5-405fb10cafa4","id":59,"sort":46,"clicks":2,"public":false,"is_new":true,"stats":[51]},"relativePath":"biliard/index.md","filePath":"biliard/index.md","lastUpdated":0}`),c={name:"biliard/index.md"},w=Object.assign(c,{setup(m){const{params:e,frontmatter:p}=i();return(u,h)=>{const t=a;return d(),n("div",null,[s(t,o(r(l(e))),null,16)])}}});export{y as __pageData,w as default};
