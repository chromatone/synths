import{u as j,a as B,b as Y,w as q}from"./chunks/index.7817d4ac.js";import{o as f,c as m,a as d,u as b,h as E,r as v,t as _,_ as G,j as W,k as Z,n as A,b as I,g as w,l as D,m as H,p as K,q as J,F as k,s as R,f as Q,x as X,y as ee,e as F,z as te,A as ne,B as re}from"./chunks/framework.b851927c.js";import{u as ie,f as ae,_ as se,a as oe}from"./chunks/useClicks.9990fc96.js";import{u as V}from"./chunks/useForm.343268dd.js";import"./chunks/chunk-42TA54KX.78cd0766.js";const le={class:"text-center line-height-loose text-md"},ce={class:"mx-auto max-w-75ch intro md-text-lg"},de=d("div",{class:"i-mdi-share"},null,-1),he=d("span",null,"Share to save for later",-1),ue=[de,he],fe={__name:"AboutShare",setup(l){const{share:e,isSupported:t}=j();function n(){e({title:"Web synths collection",text:"Look at this online synthesizer collection. No need to install anything - just your browser and any MIDI controller will do.",url:location.href})}return(r,a)=>(f(),m("div",le,[d("div",ce,[b(t)?(f(),m("button",{key:0,class:"mx-auto flex items-center gap-2 text-white py-2 px-4 mt-6 shadow-lg rounded-lg cursor-pointer bg-green-600 -hover-translate-y-2px transition",onClick:a[0]||(a[0]=c=>n()),"data-umami-event":"Shared via button"},ue)):E("",!0)])]))}},z=JSON.parse(`[{"url":"https://dotpiano.com/","date_created":"2023-10-27T12:45:53.887Z","title":"Dotpiano","slug":"dotpiano","author":"Alex Chen and Yotam Mann","author_link":null,"description":null,"tags":["polyphonic","midi","keyboard"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"6dac5187-213f-4eb8-96ed-63c2e689b206","id":1,"sort":1,"clicks":716},{"url":"https://waveform.playtronica.com/","date_created":"2023-10-27T12:45:54.644Z","title":"Waveform","slug":"waveform","author":"Qvantor","author_link":"https://github.com/qvantor/","description":null,"tags":["playtronica","polyphonic","midi"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"86cb9385-9deb-4f10-95cb-765980156e65","id":39,"sort":2,"clicks":687},{"url":"http://juno-106.js.org/","date_created":"2023-10-27T12:45:54.085Z","title":"Juno-106","slug":"juno-106","author":"Steve Goldberg ","author_link":"https://github.com/stevengoldberg","description":null,"tags":["fm","midi"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"b54cfce7-af2f-4e03-a5b3-81fc853d2cc8","id":14,"sort":3,"clicks":546},{"url":"https://chromatone.center/practice/synth/elementary/","date_created":"2023-10-27T12:45:54.453Z","title":"Elementary synth","slug":"elementary","author":"Chromatone","author_link":"https://chromatone.center","description":null,"tags":["chromatone","polyphonic","keyboard"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"21070a51-6089-48bd-8840-ba37b5f2963d","id":29,"sort":4,"clicks":396},{"url":"https://mmontag.github.io/dx7-synth-js/","date_created":"2023-10-27T12:45:54.477Z","title":"DX7 Synth","slug":"dx7","author":"Matt Montag ","author_link":"https://github.com/mmontag","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"f3b285ee-6b82-453b-9ff6-aeda18ec675b","id":30,"sort":5,"clicks":360},{"url":"https://touchme.chromatone.center/","date_created":"2023-10-27T12:45:53.941Z","title":"TouchME","slug":"touchme","author":"Chromatone","author_link":"https://chromatone.center","description":null,"tags":["chromatone","playtronica"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"68062279-8e08-4953-ae8f-7a77c584948e","id":3,"sort":6,"clicks":437},{"url":"https://play.playtronica.com/","date_created":"2023-10-27T12:45:54.513Z","title":"Sampler synth","slug":"sampler","author":"Playtronica","author_link":"https://shop.playtronica.com","description":null,"tags":["playtronica","sampler"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"e3323967-fbf7-4911-8c49-64183169f269","id":32,"sort":7,"clicks":68},{"url":"https://apps.musedlab.org/aqwertyon/theory/","date_created":"2023-10-27T12:45:54.711Z","title":"aQWERTYon","slug":"aqwertyon","author":"Mused lab","author_link":"https://musedlab.org/","description":null,"tags":["polyphonic","samples"],"archive_link":null,"archive":false,"content":"The **aQWERTYon** (QWERTY accordion) is designed to simplify the process for improvising, learning, and making music with your computer keyboard. Play along with your favorite YouTube videos, learn music theory through our Music Theory for Bedroom Producers course in collaboration with Soundfly, or take advantage of Web MIDI and us it to play and record into your favorite digital audio workstation, such as Soundtrap.com, GarageBand, Logic, or Ableton, or as input into music notation programs like Noteflight.\\n\\nhttps://youtu.be/hqFr4lF6u_Y","iframe":true,"cover":"e7c87de8-c290-4da9-b0e0-eed73871b27a","id":42,"sort":8,"clicks":31},{"url":"https://learningsynths.ableton.com/","date_created":"2023-10-27T12:45:54.360Z","title":"Learning synths","slug":"ableton","author":"Ableton","author_link":"https://github.com/Ableton","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"0bf8312d-c449-4f5c-80ad-36594ef98db6","id":26,"sort":9,"clicks":40},{"url":"http://websynths.com/","date_created":"2023-10-27T12:45:54.019Z","title":"Websynths","slug":"websynths","author":"WebSynths","author_link":"https://www.websynths.org/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"ffc54664-7ba4-4855-a56a-6657a5542a04","id":10,"sort":10,"clicks":27},{"url":"https://stuartmemo.com/synth/","date_created":"2023-10-27T12:45:54.586Z","title":"Sympathetic Synthesizer System Mk 1","slug":"sympathetic","author":"Stuart Memo ","author_link":"https://github.com/stuartmemo","description":null,"tags":["keyboard","midi","additive"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"123aeb6d-c7b0-43dd-a852-98660bdf03f0","id":37,"sort":11,"clicks":50},{"url":"https://muted.io/","date_created":"2023-10-27T12:45:54.742Z","title":"Muted.io","slug":"muted-io","author":"Sébastien Noël","author_link":"https://twitter.com/muted_io","description":null,"tags":["educational","midi"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"5c08ac7d-4414-47c0-b7d1-a9867ba3949f","id":43,"sort":12,"clicks":16},{"url":"https://www.femurdesign.com/theremin/","date_created":"2023-10-27T12:45:54.206Z","title":"Theremin","slug":"theremin","author":"Femur","author_link":"https://femurdesign.com/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"6b22ef48-6830-4cf2-810d-809408033450","id":19,"sort":13,"clicks":32},{"url":"https://touchpianist.com/","date_created":"2023-10-27T12:45:54.691Z","title":"Touch Pianist","slug":"touch-pianist","author":"EarSlap","author_link":null,"description":null,"tags":["entertainment","piano"],"archive_link":null,"archive":false,"content":"Touch Pianist is a musical toy / instrument that allows the user to perform hard-to-play classical piano music favorites (from composers like Beethoven, Mozart, Bach, Satie, Debussy to name a few) just by tapping the rhythm of the piece's particular sound events on a computer keyboard or a touch screen.\\n\\nIt also provides live visualisation of the pieces that are being performed. There is no score keeping, the user is free to perform the music in any way they wish. The premise is that it is really fun to perform a piece you know well, exactly like you feel it with so little effort.\\n\\nTouch Pianist has CoreMIDI support so you can use your favorite piano / sound plug-in in your computer as a sound source if you wish.","iframe":false,"cover":"415deeeb-a843-4363-b6c9-78918aa688af","id":41,"sort":14,"clicks":26},{"url":"http://www.disco-computer.com/synthesizer/synth.html","date_created":"2023-10-27T12:45:54.270Z","title":"Disco-computer","slug":"disco-computer","author":"Patrick Sawyer","author_link":null,"description":null,"tags":["polyphonic","fm","keyboard"],"archive_link":"archive/synthescheisse/index.html","archive":true,"content":null,"iframe":true,"cover":"0d0183e6-8964-4246-a18c-a6ca0a0f2794","id":22,"sort":15,"clicks":32},{"url":"https://seeing-sound.netlify.app/","date_created":"2023-10-27T12:45:54.492Z","title":"Video Sampler","slug":"video-sampler","author":"Playtronica","author_link":"https://shop.playtronica.com","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"b39cc546-2571-4402-84cd-f8497e27d0c9","id":31,"sort":16,"clicks":31},{"url":"http://www.igorski.nl/experiment/websid","date_created":"2023-10-27T12:45:54.438Z","title":"WebSID Commodore 64","slug":"web-sid","author":"Igor Zinken","author_link":"https://www.igorski.nl/","description":null,"tags":["polyphonic","keyboard","midi","additive"],"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"932e0ae0-0048-4c6d-92bb-a4a17a8a4dd4","id":28,"sort":18,"clicks":21},{"url":"http://nicroto.github.io/viktor/","date_created":"2023-10-27T12:45:54.388Z","title":"Viktor NV-1","slug":"nv-1","author":"Nikolay Tsenkov ","author_link":"https://github.com/nicroto","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"ff3082ad-3c38-4880-ab23-35711c97ea71","id":27,"sort":19,"clicks":43},{"url":"https://virtualpiano.eu/","date_created":"2023-10-27T12:45:54.542Z","title":"VirtualPiano.eu","slug":"virtual-piano","author":"WebSyrup","author_link":"https://websyrup.net/","description":null,"tags":["midi","keyboard"],"archive_link":null,"archive":false,"content":"VirtualPiano.eu is the online synthesizer that allows you to play 128 musical instruments for free using your PC keyboard, the mouse or by connecting an external MIDI keyboard.\\n\\nYou can adjust Volume, Reverb, Loop and quality. Use the sustain and adjust the octaves, you can also select and set different channels including the one for the drums.\\n\\nCreate your own melodies, have fun playing or use VirtualPiano to learn how to play the Piano online on your own. ","iframe":true,"cover":"9a59eea5-c77f-483c-9443-1cd0727e6dcc","id":35,"sort":20,"clicks":26},{"url":"https://onlinesequencer.net/","date_created":"2023-10-27T12:45:54.565Z","title":"Online sequencer","slug":"online-sequencer","author":"Jacob Morgan and George Burdell","author_link":"https://github.com/buildist","description":null,"tags":["sequencer"],"archive_link":null,"archive":false,"content":"**Online Sequencer** is a web-based music sequencer that allows users to create music saved online, or on their computer. The piano roll is essential to the sequencer, which is on the left of the screen, with 72 notes from C2-B7 (labelled differently from a piano, C2 on the sequencer corresponds to C1 on a piano). In addition to several parameters which can be modified to change the sound of the music, additional functionality can be accessed via the console.\\n\\nUpon opening the site, users can begin composing and \\"drawing\\" notes on the grid, with the default instrument being Electric Piano. By default, a sequence's time signature is set to 4/4, and the grid spacing is set to 1/4 (16 notes per measure). The note lengths can be adjusted by dragging the dark tab on the right of each note, and precision can be afforded by changing the 'Grid' option to other note divisions. \\n\\n## History\\n\\nOnline Sequencer was created on January 2, 2013 by Jacob Morgan during a break at Georgia Tech.\\n\\nBeginning in the fall of 2013, accounts were available but were separate from the music portion of the site. They were only used in the forum and the website chat.\\n\\nIn 2015, accounts were linked to the main website and allowed songs to be saved under someone's username.\\n\\nThe World Update in 2018 added several new instruments and changed the landscape of sound design on the site. The \\"World Update Contest\\" was held for the update.\\n\\nStarting in late 2020, OS began to receive a variety of updates which vastly improved the functionality of the site. These updates introduced features like custom grid sizes, automation with markers, extra reverb options, detune, and distortion. In 2021, the \\"Space Race\\" contest was held, as to see who could work best with the changes.\\n\\nIn late 2022, newer, higher-quality instruments were added. Some of the instruments, such as Electric Piano, Grand Piano, Violin, and Cello got an updated sustained version, while the original versions still exist under the \\"classic\\" designation.\\n\\nCurrently, the 10-Year Anniversary Contest is being held.\\n\\n## Features\\n\\nWithin the editor, numerous user interface features allow for various changes which will impact the individual sequence on that page.\\n\\n### Basic features\\n\\nUI features include:\\n\\n- Tempo (10-999 BPM)\\n- Measure count or Time count (MM: SS.ssss)\\n- Time signature (2/4, 3/4, 4/4, 5/4)\\n- Grid size (This correlates to note divisions; 1/16, 1/12, 1/8, 1/6, 1/4, 1/3, 1/2)\\n- Auto Scroll (Fast, Smooth, Off; how the sequencer displays measures off-screen as a sequence plays)\\n-  Add an Audio Track (This won't be saved to the sequence but will play alongside it for ease of transcription)\\n-  Title input\\n-   Draw, select, and erase\\n-   Instrument dropdown, instrument options, and select instrument (selects all notes of the current instrument)\\n-  Select all, Cut, Copy, and Paste\\n-  Zoom options\\n-  Export options\\n-  Help\\n-  Fullscreen\\n- Tooltips\\n\\n### Advanced features\\n\\nUsers can access more advanced features for use in their sequences by clicking the advanced tab on the instrument they wish to change. This menu contains options to change volume, panning, detune (-1200 to +1200), reverb, distortion, and an equalizer. This array lets users configure specific instruments to create specific sounds, and textures, or to accompany other instruments as a layer or development of the original sound.\\n\\nOS also allows for commands to be entered in the browser console to manipulate different options in specific ways, such as setting custom to detune values (0-infinity), custom grid sizes, note divisions, and sequence ID amongst other things. These options bring OS closer to that of classic Digital Audio Workstations (DAWs) but are still limited in terms of accessibility and availability.\\n\\n### Browser and device support\\n\\nOnline Sequencer supports Chrome and other Chromium-based browsers, such as Microsoft Edge, Opera, and Brave. Firefox is also supported, but often with limited functionality. Safari and Internet Explorer are not supported, due to engine issues.\\n\\nOther mobile browsers support sequence playback, but not editing. However, iOS users have the same problem with WebKit on macOS. However, unlike in macOS, all browsers (even Chromium-based browsers) use WebKit as the engine for iOS due to Apple prohibiting other engines for security reasons; iOS does not support Online Sequencer, other than chat and forums.\\n\\nThe website's user interface is formatted for proper use on desktops, but some pages such as the chat page, playlists, and forums should be formatted well on mobile devices. ","iframe":true,"cover":"ec08ba72-8157-4415-8b34-aea1fe686e09","id":36,"sort":21,"clicks":34},{"url":"https://www.soundtrap.com/","date_created":"2023-10-27T12:45:54.155Z","title":"Sound Trap","slug":"sound-trap","author":"Soundtrap","author_link":"https://www.soundtrap.com/about","description":null,"tags":["daw"],"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"63ef832a-f7da-4536-851f-4964005a89f1","id":17,"sort":22,"clicks":20},{"url":"https://sb.bitsnbites.eu/","date_created":"2023-10-27T12:45:54.625Z","title":"Sound Box","slug":"sound-box","author":"Bits'n'bites","author_link":"https://gitlab.com/mbitsnbites","description":null,"tags":["tracker"],"archive_link":null,"archive":false,"content":"https://github.com/mbitsnbites/soundbox","iframe":true,"cover":"f2f825f3-a084-408b-86d1-2b64cf822c3c","id":38,"sort":23,"clicks":30},{"url":"https://femurdesign.com/omni/","date_created":"2023-10-27T12:45:54.224Z","title":"Omni","slug":"omni","author":"Luke Phillips","author_link":"https://femurdesign.com/","description":null,"tags":["polyphonic","keyboard"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"fbb1364f-53cf-4f71-8f29-d7f572308e78","id":20,"sort":24,"clicks":21},{"url":"https://www.g200kg.com/docs/webmodular/","date_created":"2023-10-27T12:45:54.252Z","title":"Web Modular","slug":"web-modular","author":"g200kg","author_link":"https://www.g200kg.com/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"48e0280c-f7ff-4308-bde3-973b7febe89c","id":21,"sort":25,"clicks":30},{"url":"http://errozero.co.uk/acid-machine/","date_created":"2023-10-27T12:45:54.333Z","title":"Acid Machine 2","slug":"acid-machine-2","author":"Errozero","author_link":"https://www.errozero.co.uk/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"031eab3e-2f21-442a-8fdc-9769907824e0","id":25,"sort":26,"clicks":18},{"url":"https://ojack.github.io/PIXELSYNTH/","date_created":"2023-10-27T12:45:54.286Z","title":"PixelSynth","slug":"pixel-synth","author":"Olivia Jack","author_link":"https://ojack.xyz/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"77369c22-944c-4f6a-83b5-85e16fe43abc","id":24,"sort":27,"clicks":33},{"url":"https://webaudiodemos.appspot.com/midi-synth/index.html","date_created":"2023-10-27T12:45:53.963Z","title":"MIDI–driven Web Audio","slug":"midi-driven-web-audio","author":"Chris Wilson","author_link":"https://github.com/cwilso","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"0005a0c9-c7e7-4922-a1e5-49d4326d2f77","id":6,"sort":28,"clicks":21},{"url":"http://samplestitch.com.s3-website-us-east-1.amazonaws.com/","date_created":"2023-10-27T12:45:54.185Z","title":"Samplestich","slug":"sample-stich","author":"Matt Daniels","author_link":"https://mdaniels.com","description":null,"tags":["samples","keyboard"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"89859f9f-0d45-44dc-93b6-98dfa2e7d799","id":18,"sort":29,"clicks":21},{"url":"https://www.audiotool.com/product/device/heisenberg/","date_created":"2023-10-27T12:45:53.983Z","title":"Meet the Heisenberg","slug":"meet-the-heisenberg","author":"AudioTool","author_link":"https://www.audiotool.com","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"a2397ce6-7712-40e5-b4e0-df95c7992662","id":8,"sort":30,"clicks":27},{"url":"https://www.gsn-lib.org/apps/cardboardsynth/index.html","date_created":"2023-10-27T12:45:54.002Z","title":"Cardboard Synth","slug":"cardboard-synth","author":" Thorsten Thormählen","author_link":"https://www.uni-marburg.de/en/fb12/research-groups/grafikmultimedia/thormae","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"29fe1fcc-ca85-41b3-ab1e-7f10770f2c1f","id":9,"sort":31,"clicks":25},{"url":"http://tanguysynth.com/","date_created":"2023-10-27T12:45:54.036Z","title":"Tanguy synth","slug":"tanguy-synth","author":"Luke Teaford","author_link":"https://github.com/luketeaford","description":null,"tags":["monophonic","additive","keyboard"],"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"5471a71e-7c5b-4ea6-aee0-1b394873c381","id":11,"sort":32,"clicks":14},{"url":"http://mod-synth.io/","date_created":"2023-10-27T12:45:54.052Z","title":"MOD synth","slug":"mod-synth","author":"André Venâncio ","author_link":"https://github.com/andrevenancio","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"31564bf3-fca9-41a4-b390-d78ccd848107","id":12,"sort":33,"clicks":27},{"url":"http://perso.numericable.fr/olivier.friker/synth/O3-synth%20V1.3.html","date_created":"2023-10-27T12:45:54.069Z","title":"OLIF SY1K","slug":"olif-sy-1-k","author":"Olivier Friker","author_link":null,"description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"3b9a5e11-3de3-46fe-9cdc-e1668b152f31","id":13,"sort":34,"clicks":15},{"url":"http://www.noisesculptor.com/","date_created":"2023-10-27T12:45:54.104Z","title":"Note Sculptor","slug":"note-sculptor","author":"Ruin Technology","author_link":null,"description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":false,"cover":"a01968d1-3f88-4522-9752-1c33d10d90d9","id":15,"sort":35,"clicks":22},{"url":"http://aikelab.net/websynthv2/","date_created":"2023-10-27T12:45:54.141Z","title":"WebAudioSynth V2","slug":"web-audio-synth-v2","author":"like","author_link":"https://github.com/aike/","description":null,"tags":null,"archive_link":null,"archive":false,"content":null,"iframe":true,"cover":"ac668fba-7226-43dc-a91f-bd21a31446e5","id":16,"sort":36,"clicks":39}]`),me={class:"text-center line-height-loose text-md"},pe={class:"mx-auto max-w-75ch intro md-text-lg"},ge={class:"p-2 flex flex-col mt-8"},be={class:"text-4xl font-bold"},ye=d("div",{class:"text-lg"},"web synths",-1),_e={class:"p-2 flex flex-col mt-8"},Ee={class:"text-4xl font-bold"},we=d("div",{class:"text-lg"},"web musicians",-1),Ne={__name:"AboutCount",setup(l){const e=v(),t=v(0),n=v(0),r=B(t),a=B(n),c=Y(e);return q(c,async u=>{if(u){t.value=z.length;const g=await(await fetch("https://db.synth.chromatone.center/flows/trigger/0c0e8d82-8e12-44a6-867a-57ddeec9d774",{type:"GET",mode:"cors",headers:{"Content-Type":"application/json"}})).json();n.value=g.count}}),(u,p)=>(f(),m("div",me,[d("div",pe,[d("div",{class:"flex justify-center",ref_key:"counters",ref:e},[d("div",ge,[d("div",be,_(b(r).toFixed()),1),ye]),d("div",_e,[d("div",Ee,_(b(a).toFixed()||5e3)+"+",1),we])],512)])]))}};const x=l=>(X("data-v-5613fdcd"),l=l(),ee(),l),ve={class:"p-4 flex flex-col items-start justify-between gap-2",style:{flex:"10 0 200px"}},Se={class:"flex items-center gap-2 flex-0 w-full"},Me={class:"transition text-xl select-none absolute top-4 left-4 text-center z-200"},Ae={key:0,class:"px-2 py-1 bg-light-800 dark-bg-dark-800 rounded-xl transition text-sm select-none absolute bottom-2 left-2 text-center z-200 flex items-center gap-1 opacity-70 hover-opacity-100",title:"Since 28 Oct 2023"},Ie=x(()=>d("div",{class:"i-la-eye"},null,-1)),Te={class:"flex-1"},Ce={class:"flex items-center gap-2"},ke={class:"text-2xl font-bold"},Re={key:0,class:"font-normal",title:"Archived locally by us"},xe=x(()=>d("div",{class:"i-ph-archive-duotone"},null,-1)),Oe=[xe],Be={class:"flex-1"},De={key:1,class:"flex-1 flex items-end flex flex-wrap gap-2"},Le={class:"absolute bottom-4 right-4"},Ue=["href"],Pe=x(()=>d("div",{class:"i-tabler-browser-check"},null,-1)),Ge=[Pe],He={key:1,class:"i-tabler-browser-x text-lg opacity-40 transition",title:"Open in a new window"},Fe={__name:"SynthCard",props:{pos:{type:Number,default:0},off:{type:Boolean,default:!1},title:{type:String,default:""},id:{type:Number,default:0},slug:{type:String,default:""},description:{type:String,default:""},cover:{type:String,default:""},url:{type:String,default:""},author:{type:String,default:""},author_link:{type:String,default:""},tags:{type:Array,default:()=>[]},archive:{type:Boolean,default:!1},archive_link:{type:String,default:""},iframe:{type:Boolean,default:!1},clicks:{type:Number,default:0},counter:{type:Number,default:0}},setup(l){const{isDark:e}=W(),t=l,{isFormOpen:n}=V(),{clicksCount:r,clickSynth:a}=ie(t.id);async function c(){t.off?n.value=!n.value:(a(t.id),window.open(t.archive?t.archive_link:t.url,"_blank"))}return(u,p)=>{var M;const g=se,S=Z("ClientOnly");return f(),m("button",{class:"max-w-180 w-full flex flex-wrap items-stretch text-left relative bg-light-500 dark-bg-dark-300 -hover-translate-y-6px transition duration-200 hover-shadow-lg rounded-lg overflow-hidden relative border-1 border-dark-100 border-opacity-20 shadow-sm dark-border-light-800 dark-border-opacity-20",style:A({borderColor:b(ae)[l.id]?b(e)?"hsl(50deg,80%,35%)":"hsl(40deg,90%,80%)":null}),onClick:c},[d("div",{class:"cover min-h-50 bg-cover bg-center filter transition",style:A([{backgroundImage:`url(/cover/${l.slug}.webp)`},{flex:"1 1 280px"}])},null,4),d("div",ve,[d("div",Se,[d("div",Me,_(l.pos+1),1),b(r)||l.counter?(f(),m("div",Ae,[I(_(b(r)||l.counter),1),Ie])):E("",!0),d("div",Te,[d("span",Ce,[d("div",ke,_(l.title),1),l.archive?(f(),m("span",Re,Oe)):E("",!0)])]),w(S,null,{default:D(()=>[w(g,{class:"text-xl mr-2 absolute right-2 z-200",id:l.id},null,8,["id"])]),_:1})]),l.author?(f(),H(K(l.author_link?"a":"div"),{key:0,class:"p-0 text-md",href:l.author_link,target:"_blank"},{default:D(()=>[I("by "+_(l.author),1)]),_:1},8,["href"])):E("",!0),d("div",Be,[J(u.$slots,"default",{},void 0,!0)]),((M=l.tags)==null?void 0:M.length)>0?(f(),m("div",De,[(f(!0),m(k,null,R(l.tags,O=>(f(),m("div",{class:"px-2 py-1 text-sm bg-light-800 dark-bg-dark-500 rounded-lg",key:O},_(O),1))),128))])):E("",!0),d("div",Le,[l.iframe?(f(),m("a",{key:0,class:"text-lg opacity-40 hover-opacity-80 transition",title:"Open in an iFrame",onClick:p[0]||(p[0]=Q(()=>{},["stop"])),href:`/${l.slug}/`},Ge,8,Ue)):(f(),m("div",He))])])],4)}}},Ve=G(Fe,[["__scopeId","data-v-5613fdcd"]]);const ze={class:"flex flex-col items-center gap-8 py-8 p-2 max-w-160 mx-auto"},$e=["index"],je={__name:"SynthList",setup(l){const{isAccessGranted:e}=V(),t=v(z);function n(a){return!e.value&&a>5}const r=v([]);return F(async()=>{r.value=await oe("synths",{fields:["id","clicks"]})}),(a,c)=>{const u=Ve;return f(),m("div",ze,[(f(!0),m(k,null,R(t.value,(p,g)=>{var S;return f(),m("div",{class:"flex w-full sticky",style:A([{top:`${80+g*4}px`,zIndex:g+10},{flex:"1 1 240px"}]),key:p.id,index:g},[(f(),H(u,te({pos:g,style:{filter:n(g)?"contrast(70%) blur(2px) opacity(80%)":""},key:p.id},p,{counter:(S=r.value.find(M=>M.id==p.id))==null?void 0:S.clicks,off:n(g)}),null,16,["pos","style","counter","off"]))],12,$e)}),128))])}}};class y{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==!0}addListener(e,t,n={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==y.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof t!="function")throw new TypeError("The callback must be a function.");const r=new L(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return e===void 0?this.eventMap[y.ANY_EVENT]&&this.eventMap[y.ANY_EVENT].length>0?!0:Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[e]&&this.eventMap[e].length>0?t instanceof L?this.eventMap[e].filter(r=>r===t).length>0:typeof t=="function"?this.eventMap[e].filter(r=>r.callback===t).length>0:t==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[y.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(a=>{if(a.suspended)return;let c=[...t];Array.isArray(a.arguments)&&(c=c.concat(a.arguments)),a.remaining>0&&(n.push(a.callback.apply(a.context,c)),a.count++),--a.remaining<1&&a.remove()}),n}removeListener(e,t,n={}){if(e===void 0){this.eventMap={};return}else if(!this.eventMap[e])return;let r=this.eventMap[e].filter(a=>t&&a.callback!==t||n.remaining&&n.remaining!==a.remaining||n.context&&n.context!==a.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let a,c=this.addListener(e,()=>{clearTimeout(a),n()},{remaining:1});t.duration!==1/0&&(a=setTimeout(()=>{c.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class L{constructor(e,t,n,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==y.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments!==void 0&&!Array.isArray(r.arguments)&&(r.arguments=[r.arguments]),r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r),r.duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class i{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),i.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),i.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),i.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),i.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class N{constructor(e,t={}){this.duration=s.defaults.note.duration,this.attack=s.defaults.note.attack,this.release=s.defaults.note.release,t.duration!=null&&(this.duration=t.duration),t.attack!=null&&(this.attack=t.attack),t.rawAttack!=null&&(this.attack=o.from7bitToFloat(t.rawAttack)),t.release!=null&&(this.release=t.release),t.rawRelease!=null&&(this.release=o.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=o.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=o.getNoteDetails(e);if(s.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(s.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(s.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(s.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(s.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(s.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(s.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return o.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=o.from7bitToFloat(e)}get rawRelease(){return o.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=o.from7bitToFloat(e)}get number(){return o.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return s.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+e*12+t,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class o{static toNoteNumber(e,t=0){if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");const r={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let a=(n.octave+1+t)*12;if(a+=r[n.name],n.accidental&&(n.accidental.startsWith("b")?a-=n.accidental.length:a+=n.accidental.length),a<0||a>127)throw new RangeError("Invalid octaveOffset value");return a}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let a=t[2].toLowerCase();return a=a===""?void 0:a,{accidental:a,identifier:n+(a||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(s.validation){if(e==="all")t=["all"];else if(e==="none")return[]}return Array.isArray(e)?t=e:t=[e],t.indexOf("all")>-1&&(t=i.MIDI_CHANNEL_NUMBERS),t.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(e){let t=!1;const n=parseFloat(e);return isNaN(n)?!1:(typeof e=="string"&&e.substring(0,1)==="+"?n>=0&&(t=s.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if(typeof e=="string"||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch{return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=Math.floor(e/12-1)+t;return n[e%12]+r.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof N)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new N(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{n.push(this.buildNote(r,t))}),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(e*127),0),127)}static fromMsbLsbToFloat(e,t=0){s.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){s.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(e*16383);return{msb:t>>7,lsb:t&127}}static offsetNumber(e,t=0,n=0){if(s.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+t*12+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}static getCcNameByNumber(e){if(!(s.validation&&(e=parseInt(e),!(e>=0&&e<=127))))return i.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let t=i.CONTROL_CHANGE_MESSAGES.find(n=>n.name===e);return t?t.number:i.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in i.CHANNEL_MODE_MESSAGES)if(i.CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===i.CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&typeof window.document<"u"}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Ye extends y{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(s.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=o.fromFloatTo7Bit(t));const r=s.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),o.buildNoteArray(e).forEach(a=>{this.send([(i.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),a.getOffsetNumber(r),t],{time:o.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if(typeof e=="string"&&(e=o.getCcNumberByName(e)),Array.isArray(t)||(t=[t]),s.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(t=t.map(r=>{const a=Math.min(Math.max(parseInt(r),0),127);if(isNaN(a))throw new TypeError("Values must be integers between 0 and 127");return a}),t.length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach((r,a)=>{this.send([(i.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+a*32,t[a]],{time:o.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2?this:(this.sendControlChange(38,e[1],t),this)}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=i.REGISTERED_PARAMETERS[e]),s.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.REGISTERED_PARAMETERS).forEach(r=>{i.REGISTERED_PARAMETERS[r][0]===e[0]&&i.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=i.REGISTERED_PARAMETERS[e]),s.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.REGISTERED_PARAMETERS).forEach(r=>{i.REGISTERED_PARAMETERS[r][0]===e[0]&&i.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){this.sendNoteOn(e,t);const n=Array.isArray(e)?e:[e];for(let r of n)if(parseInt(r.duration)>0){const a={time:(o.toTimestamp(t.time)||s.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,a)}else if(parseInt(t.duration)>0){const a={time:(o.toTimestamp(t.time)||s.time)+parseInt(t.duration),release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(r,a)}return this}sendNoteOff(e,t={}){if(s.validation){if(t.rawRelease!=null&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(t.release!=null&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawRelease!=null?n=t.rawRelease:isNaN(t.release)||(n=Math.round(t.release*127));const r=s.octaveOffset+this.output.octaveOffset+this.octaveOffset;return o.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(a=>{this.send([(i.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),a.getOffsetNumber(r),a.rawRelease],{time:o.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(s.validation){if(t.rawAttack!=null&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(t.attack!=null&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawAttack!=null?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(t.attack*127));const r=s.octaveOffset+this.output.octaveOffset+this.octaveOffset;return o.buildNoteArray(e,{rawAttack:n}).forEach(a=>{this.send([(i.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),a.getOffsetNumber(r),a.rawAttack],{time:o.toTimestamp(t.time)})}),this}sendChannelMode(e,t=0,n={}){if(typeof e=="string"&&(e=i.CHANNEL_MODE_MESSAGES[e]),s.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(i.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:o.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(s.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(i.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e*127)],{time:o.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,s.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let a=r>>7&127,c=r&127;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[a,c],t),this}sendModulationRange(e,t,n={}){if(s.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(t!=null&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),s.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(s.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const a=o.fromFloatToMsbLsb((e+1)/2);n=a.msb,r=a.lsb}return this.send([(i.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:o.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(s.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,s.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(i.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:o.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=i.REGISTERED_PARAMETERS[e]),s.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(s.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(s.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return e==="mono"?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class C extends y{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Ye(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:s.time};e.port.connection==="open"?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n=0){if(e instanceof $&&(e=o.isNode?e.data:e.rawData),e instanceof Uint8Array&&o.isNode&&(e=Array.from(e)),s.validation){if(!Array.isArray(e)&&!(e instanceof Uint8Array)&&(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(r=parseInt(r),!(r>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,o.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=i.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=i.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,i.SYSTEM_MESSAGES.sysexend);this.send([i.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():s.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(s.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([i.SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){e=Math.floor(e)||0;var n=e>>7&127,r=e&127;return this.send([i.SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(s.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([i.SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([i.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([i.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([i.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([i.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([i.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([i.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([i.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return s.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,t,n)}),this}sendControlChange(e,t,n={},r={}){if(s.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const a=n;n=r,n.channels=a,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(a=>{this.channels[a].sendControlChange(e,t,n)}),this}sendPitchBendRange(e=0,t=0,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,t,n)}),this}setPitchBendRange(e=0,t=0,n="all",r={}){return s.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(e,t,n)}),this}setRegisteredParameter(e,t=[],n="all",r={}){return s.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,t)}),this}sendPitchBend(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPitchBend(e,t)}),this}sendProgramChange(e=0,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendProgramChange(e,t)}),this}sendModulationRange(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(e,t,n)}),this}setModulationRange(e=0,t=0,n="all",r={}){return s.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendMasterTuning(e,t)}),this}setMasterTuning(e,t={},n={}){return s.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningProgram(e,t)}),this}setTuningProgram(e,t="all",n={}){return s.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningBank(e,t)}),this}setTuningBank(e,t="all",n={}){return s.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(s.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const a=n;n=r,n.channels=a,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(a=>{this.channels[a].sendChannelMode(e,t,n)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},t={}){if(s.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const n=e;e=t,e.channels=n,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,t)}),this}sendLocalControl(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendLocalControl(e,t)}),this}sendOmniMode(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendOmniMode(e,t)}),this}sendNrpnValue(e,t,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,t,n)}),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return s.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnIncrement(e,t)}),this}incrementRegisteredParameter(e,t="all",n={}){return s.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnDecrement(e,t)}),this}decrementRegisteredParameter(e,t="all",n={}){return s.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(s.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(s.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class U{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(i.SYSTEM_MESSAGES),...Object.keys(i.CHANNEL_MESSAGES)],this.channels=i.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),s.validation&&(e.forEach(n=>{if(!(n instanceof C))throw new TypeError("Destinations must be of type 'Output'.")}),t.types!==void 0&&t.types.forEach(n=>{if(!i.SYSTEM_MESSAGES.hasOwnProperty(n)&&!i.CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),t.channels!==void 0&&t.channels.forEach(n=>{if(!i.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(t=>{s.validation&&!(t instanceof C)||t.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class qe extends y{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if(t.type==="noteoff"||t.type==="noteon"&&r===0)this.notesState[n]=!1,t.type="noteoff",t.note=new N(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+s.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=o.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if(t.type==="noteon")this.notesState[n]=!0,t.note=new N(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+s.octaveOffset),{rawAttack:r}),t.value=o.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if(t.type==="keyaftertouch")t.note=new N(o.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+s.octaveOffset)),t.value=o.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if(t.type==="controlchange"){t.controller={number:n,name:i.CONTROL_CHANGE_MESSAGES[n].name,description:i.CONTROL_CHANGE_MESSAGES[n].description,position:i.CONTROL_CHANGE_MESSAGES[n].position},t.subtype=t.controller.name||"controller"+n,t.value=o.from7bitToFloat(r),t.rawValue=r;const a=Object.assign({},t);a.type=`${t.type}-controller${n}`,delete a.subtype,this.emit(a.type,a);const c=Object.assign({},t);c.type=`${t.type}-`+i.CONTROL_CHANGE_MESSAGES[n].name,delete c.subtype,c.type.indexOf("controller")!==0&&this.emit(c.type,c),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else t.type==="programchange"?(t.value=n,t.rawValue=t.value):t.type==="channelaftertouch"?(t.value=o.from7bitToFloat(n),t.rawValue=n):t.type==="pitchbend"?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,t.type==="localcontrol"&&(t.value=t.message.data[2]===127,t.rawValue=t.message.data[2]),t.type==="omnimodeon"?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="omnimodeoff"&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),t.type==="monomodeon"?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="polymodeon"&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1];t===99||t===101?(this._nrpnBuffer=[],this._rpnBuffer=[],t===99?this._nrpnBuffer=[e.message]:n!==127&&(this._rpnBuffer=[e.message])):t===98||t===100?t===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):(t===6||t===38||t===96||t===97)&&(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===6||e===38||e===96||e===97||e===98||e===99||e===100||e===101}_dispatchParameterNumberEvent(e,t,n,r){e=e==="nrpn"?"nrpn":"rpn";const a={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:o.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};e==="rpn"?a.parameter=Object.keys(i.REGISTERED_PARAMETERS).find(p=>i.REGISTERED_PARAMETERS[p][0]===t&&i.REGISTERED_PARAMETERS[p][1]===n):a.parameter=(t<<7)+n;const c=i.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;a.type=`${e}-${c}`,this.emit(a.type,a);const u=Object.assign({},a);u.type==="nrpn-dataincrement"?u.type="nrpn-databuttonincrement":u.type==="nrpn-datadecrement"?u.type="nrpn-databuttondecrement":u.type==="rpn-dataincrement"?u.type="rpn-databuttonincrement":u.type==="rpn-datadecrement"&&(u.type="rpn-databuttondecrement"),this.emit(u.type,u),a.type=e,a.subtype=c,this.emit(a.type,a)}getChannelModeByNumber(e){return s.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),o.getChannelModeByNumber(e)}getCcNameByNumber(e){if(s.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),e=parseInt(e),!(e>=0&&e<=127)))throw new RangeError("Invalid control change number.");return o.getCcNameByNumber(e)}getNoteState(e){e instanceof N&&(e=e.identifier);const t=o.guessNoteNumber(e,s.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class ${constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=(this.statusByte&15)+1):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=o.getPropertyByValue(i.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=o.getPropertyByValue(i.SYSTEM_MESSAGES,this.command)),this.statusByte===i.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class We extends y{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new qe(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:s.time,target:this,port:this};e.port.connection==="open"?(t.type="opened",this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new $(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(t))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage",t.type==="songselect"&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){s.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(s.validation&&typeof n=="function"){let r=t!=null?[].concat(t):void 0;t=n,n={channels:r}}if(i.CHANNEL_EVENTS.includes(e)){n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS);let r=[];return o.sanitizeChannels(n.channels).forEach(a=>{r.push(this.channels[a].addListener(e,t,n))}),r}else return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(s.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}return i.CHANNEL_EVENTS.includes(e)?(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),o.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(e,t))):super.hasListener(e,t)}removeListener(e,t,n={}){if(s.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}if(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),e==null)return o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();i.CHANNEL_EVENTS.includes(e)?o.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return e instanceof U?n=e:n=new U(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter(t=>t!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return s.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Ze extends y{constructor(){super(),this.defaults={note:{attack:o.from7bitToFloat(64),release:o.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(o.isNode){try{window.navigator}catch{global.navigator=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)()}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=e.validation!==!1,this.validation&&(typeof e=="function"&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return typeof e.callback=="function"&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},a={timestamp:this.time,target:this,type:"enabled"};try{typeof e.requestMIDIAccessFunction=="function"?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(c){return n.error=c,this.emit("error",n),typeof e.callback=="function"&&e.callback(c),Promise.reject(c)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(c){return n.error=c,this.emit("error",n),typeof e.callback=="function"&&e.callback(c),Promise.reject(c)}return this.emit("enabled",a),typeof e.callback=="function"&&e.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(this._disconnectedInputs[n].id===e.toString())return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(this.inputs[n].id===e.toString())return this.inputs[n]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(~this._disconnectedInputs[n].name.indexOf(e))return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(~this.inputs[n].name.indexOf(e))return this.inputs[n]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(~this._disconnectedOutputs[n].name.indexOf(e))return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(~this.outputs[n].name.indexOf(e))return this.outputs[n]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(this._disconnectedOutputs[n].id===e.toString())return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(this.outputs[n].id===e.toString())return this.outputs[n]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),o.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127?o.getNoteDetails(o.offsetNumber(e,this.octaveOffset)).octave:!1}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),o.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),o.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),o.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),o.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),o.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(t=>e.push(t.destroy())),this.outputs.forEach(t=>e.push(t.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if(e.port.state==="connected"&&e.port.connection==="open"){e.port.type==="output"?t.port=this.getOutputById(e.port.id):e.port.type==="input"&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if(e.port.state==="disconnected"&&e.port.connection==="pending"){e.port.type==="input"?t.port=this.getInputById(e.port.id,{disconnected:!0}):e.port.type==="output"&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const n=this._inputs[t];Array.from(this.interface.inputs.values()).find(a=>a===n._midiInput)||(this._disconnectedInputs.push(n),this._inputs.splice(t,1))}let e=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(n=>n._midiInput===t)){let n=this._disconnectedInputs.find(r=>r._midiInput===t);n||(n=new We(t)),this._inputs.push(n),e.push(n.open())}}),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const n=this._outputs[t];Array.from(this.interface.outputs.values()).find(a=>a===n._midiOutput)||(this._disconnectedOutputs.push(n),this._outputs.splice(t,1))}let e=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(n=>n._midiOutput===t)){let n=this._disconnectedOutputs.find(r=>r._midiOutput===t);n||(n=new C(t)),this._outputs.push(n),e.push(n.open())}}),Promise.all(e)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),o.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),o.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&navigator.requestMIDIAccess}get sysexEnabled(){return!!(this.interface&&this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.6"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),i.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),i.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),i.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),i.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),i.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const s=new Ze;s.constructor=null;const h=ne({enabled:!1,initiated:!1,playing:!1,stopped:!1,inputs:{},outputs:{},note:{},cc:{},log:[]});function Ke(){return F(()=>{s.enable({software:!0}),s.addListener("enabled",()=>{T()}),s.addListener("connected",()=>{T()}),s.addListener("disconnected",()=>{T()})}),{midi:h}}function T(){var l;console.log("WebMidi enabled!"),h.enabled=!0,h.inputs={},(l=s.inputs)==null||l.forEach(e=>{h.inputs[e.id]={name:e.name,manufacturer:e.manufacturer,forwarder:e.addForwarder(),clock:0},e.removeListener(),e.addListener("start",()=>{h.playing=!0,h.stopped=!1}),e.addListener("stop",()=>{h.playing=!1,h.stopped=Date.now()});const t=[];let n=15;e.addListener("clock",r=>{const a=r.timestamp-h.inputs[e.id].clock;t.push(a),t.length>50&&t.shift(),n=t.reduce((c,u)=>c+u,0)/t.length,h.inputs[e.id].diff=n,h.inputs[e.id].bpm=1e3/n/24*60,h.inputs[e.id].clock=r.timestamp}),e.addListener("midimessage",r=>{var a;((a=r==null?void 0:r.message)===null||a===void 0?void 0:a.type)!="clock"&&(h.inputs[e.id].event=r,h.message=r.message,h.log.unshift(r),h.log.length>100&&h.log.pop())}),e.addListener("noteon",r=>{h.inputs[e.id].note=P(r)}),e.addListener("noteoff",r=>{h.inputs[e.id].note=P(r)}),e.addListener("controlchange",r=>{const a=Je(r);a&&(h.inputs[e.id].note=a)}),e.addListener("clock",r=>{h.clock=r.timestamp})}),h.outputs=re({}),s.outputs.forEach(e=>{h.outputs[e.id]={name:e.name,manufacturer:e.manufacturer}})}function P(l){const e={...l.note,port:l.port.id,type:l.type,timestamp:l.timestamp,channel:l.target.number,velocity:0,number:l.note.number,pitch:(l.note.number+3)%12,octA:Math.floor((l.note.number+3)/12)-1};return h.note=e,e}function Je(l){let e={channel:l.message.channel,timestamp:l.timestamp,number:l.controller.number,value:Number(l.value),raw:l.rawValue,port:l.port.id};return h.cc=e,e}const Qe={key:0,class:"flex flex-wrap gap-2 items-center p-2 bg-light-300 bg-opacity-60 backdrop-blur-lg dark-bg-dark-500 dark-bg-opacity-50 max-h-60 shadow-lg overflow-y-scroll rounded mx-auto w-full z-1"},Xe={class:"opacity-50"},et=["title"],tt={class:"text-sm"},nt={key:1,class:"text-xs opacity-60",style:{flex:"1 1 200px"}},rt={__name:"MidiPanel",setup(l){const{midi:e}=Ke();return(t,n)=>b(e).enabled?(f(),m("div",Qe,[d("div",Xe,[d("div",{class:"i-simple-icons-midi text-2xl",title:"MIDI",style:A({color:b(e).enabled?"green":"gray"})},null,4)]),Object.keys(b(e).inputs).length>0?(f(!0),m(k,{key:0},R(b(e).inputs,r=>(f(),m("div",{class:"select-none flex flex-col gap-1 rounded px-2 py-1 bg-light-300 dark-bg-dark-700 shadow",key:r.name,title:`by ${r.manufacturer}`},[d("div",tt,_(r.name),1)],8,et))),128)):(f(),m("div",nt,"Connect a MIDI device"))])):E("",!0)}},it="/click-logo.svg",_t=JSON.parse('{"title":"Web synths","description":"Web synthesizers to play with MIDI controllers","frontmatter":{"title":"Web synths","description":"Web synthesizers to play with MIDI controllers","date":"2023-06-22T00:00:00.000Z","layout":"home"},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1698854760000}'),at={name:"index.md"},st=d("h1",{class:"text-center text-2xl sm-text-3xl font-bold mt-4",style:{padding:"0.1rem 1rem"}},"Free web synthesizers collection ",-1),ot=d("h3",{class:"text-xl sm-text-2xl text-center my-2",style:{padding:"0 1rem"}},"Discover the music potential of your browser ",-1),lt={class:"px-4 text-lg text-center mb-8 max-w-150 mx-auto"},ct=d("a",{class:"font-bold",href:"https://chromatone.center",target:"_blank",rel:"noopener"}," Chromatone",-1),dt=d("a",{class:"font-bold",href:"https://playtronica.com",target:"_blank",rel:"noopener"}," Playtronica",-1),ht=d("h3",{class:"font-bold text-xl"},"Welcome to the community of web-based musicians!",-1),ut=d("p",null,[d("a",{target:"_blank",href:"https://chromatone.center/"},[d("img",{src:it,class:"max-w-16 mx-auto"})])],-1);function ft(l,e,t,n,r,a){const c=rt,u=je,p=Ne,g=fe;return f(),m("div",null,[st,ot,w(c,{class:"max-w-140 mt-4"}),w(u),d("div",lt,[ct,I(" is an open source visual music language for education, research and performance. We develop a new universal way to communicate music. "),dt,I(" is a digital playground that explores the possibilities of the material world through technology, creating gadgets that make the world musical. Together we share our passion for web-based music instruments. "),w(p),ht,ut,w(g)])])}const Et=G(at,[["render",ft]]);export{_t as __pageData,Et as default};
